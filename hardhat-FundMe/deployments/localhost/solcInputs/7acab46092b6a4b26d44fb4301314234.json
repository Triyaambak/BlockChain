{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.8;\n\nimport \"./PriceConverter.sol\";\n\n//Errors\nerror FundMe__NotOwner();\nerror FundMe__NotEnoughEth();\nerror FundMe__WithdrawFailed();\n\n/**\n * @title A contract for crowd funding\n * @author Triyaambak S\n * @notice This contract is to demo a sample funding contract\n * @dev This implements price feeds as our libraries\n */\n\ncontract FundMe {\n    //Type declarations\n    using PriceConvertor for uint256;\n\n    //State variables\n    uint256 public constant MINUSD = 50 * 1e18;\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmount;\n    address private immutable i_owner;\n\n    AggregatorV3Interface public s_priceFeed;\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner,\"Sender is not Owner\");\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        if (msg.value.getConversionRate(s_priceFeed) <= MINUSD) {\n            revert FundMe__NotEnoughEth();\n        }\n        s_funders.push(msg.sender);\n        s_addressToAmount[msg.sender] += msg.value;\n    }\n\n    /*\n        This withdraw function takes a ton of gas and hence is optimized\n        function withdraw() public onlyOwner {\n            for (uint256 i = 0; i < s_funders.length; i++) {\n                address funder = s_funders[i];\n                s_addressToAmount[funder] = 0;\n            }\n\n            s_funders = new address[](0);\n\n            (bool success, ) = payable(msg.sender).call{\n                value: address(this).balance\n            }(\"\");\n            require(success, \"Withdraw failed\");\n        }\n    */\n\n    function withdraw() public onlyOwner {\n        address[] memory funders = s_funders;\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            s_addressToAmount[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n        (bool success, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        if (success != true) {\n            revert FundMe__WithdrawFailed();\n        }\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n\n    function addressToAmountFunded(\n        address funder\n    ) public view returns (uint256) {\n        return s_addressToAmount[funder];\n    }\n\n    function getFunder() public view returns (address) {\n        return s_funders[s_funders.length - 1];\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.8;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConvertor {\n    function getPrice(\n        AggregatorV3Interface priceFeedAddress\n    ) internal view returns (uint256) {\n        //Address 0x694AA1769357215DE4FAC081bf1f309aDC325306\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            priceFeedAddress\n        );\n        (, int price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e18);\n    }\n\n    function getVersion() internal view returns (uint256) {\n        AggregatorV3Interface versionFeed = AggregatorV3Interface(\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\n        );\n        return versionFeed.version();\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPriceUSD = getPrice(priceFeed);\n        uint256 ethAmountUSD = (ethAmount * ethPriceUSD) / 1e18;\n        return ethAmountUSD;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}